<!-- mission file for GADEN player second source-->

<launch>

    <arg name="scenario" default="river" />
    <arg name="simulation" default="dynamic" />
    <arg name="source_location_x" default="-210" />
    <arg name="source_location_y" default="130" />
    <arg name="source_location_z" default="-4" />
    ### NODE environment (for RVIZ visualization) ###


    <node name="map_server" pkg="map_server" type="map_server" args="$(find test_env)/River/occupancy_robot/occupancy.yaml">
      <param name="frame_id" value="occ_map"/>
    </node>



<node pkg="tf" type="static_transform_publisher" name="occ_broadcaster" args="-558.396 -237.204 0 0 0 0 local_map occ_map 100" />


 <!--
    ### URDF MODEL not working ###
    <param name="robot_description" textfile="$(find asv_urdf_description)/urdf/asv_urdf.xacro" />
    <param name="use_gui" value="False"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />



    <node pkg="tf" type="static_transform_publisher" name="base_link_broad" args="0.0 0.0 0.0 0 0 0 asv1_local_base_link base_link 100" />
-->


    ### RVIZ ###
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find test_env)/River/launch/gaden.rviz"/>


     ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" type="environment" name="environment" output="screen">
        <param name="verbose" value="false"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="local_map"/>

        # Plot CAD models (Collada format .dae)
        <param name="number_of_CAD" value="6"/>
        <rosparam subst_value="True">
            CAD_0: package://test_env/River/cad_models/island01.stl
            CAD_0_color: [1, 0, 0]
            CAD_1: package://test_env/River/cad_models/island02.stl
            CAD_1_color: [1, 0, 0]
            CAD_2: package://test_env/River/cad_models/island03.stl
            CAD_2_color: [1, 0, 0]
            CAD_3: package://test_env/River/cad_models/land01.stl
            CAD_3_color: [1, 0, 0]
            CAD_4: package://test_env/River/cad_models/land02.stl
            CAD_4_color: [1, 0, 0]
            CAD_5: package://test_env/River/cad_models/land03.stl
            CAD_5_color: [1, 0, 0]
        </rosparam>

        # Plot 3D OccupancyGridmap

        <param name="occupancy3D_data" value="$(find test_env)/River/OccupancyGrid3D.csv" />


        # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <param name="source_0_position_x" value="$(arg source_location_x)"/>
        <param name="source_0_position_y" value="$(arg source_location_y)"/>
        <param name="source_0_position_z" value="$(arg source_location_z)"/>
        <rosparam>
            source_0_scale: 0.2
            source_0_color: [0.0, 1.0, 0.0]
        </rosparam>
    </node>



    ### NODE PLAYER ###
    #-------------------
    <node pkg="gaden_player" type="gaden_player" name="gaden_player" output="screen">
        <param name="verbose" value="false" />
	    <param name="player_freq" value="10" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="0" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
      <param name="fixed_frame" value="local_map"/>

      <param name="occupancyFile" value="$(find test_env)/River/OccupancyGrid3D.csv" />

       <!--

       <param name="occupancyFile" value="$(find test_env)/river/River02/OccupancyGrid3D.csv" />
        <param name="occupancy3D_data" value="$(find test_env)/river/River02/OccupancyGrid3D.csv" />
-->
        # Data from the "filament_simulator" pkg. Multiple sources can be set here
        <param name="simulation_data_0" value="$(find test_env)/River/gas_simulations/100_10_100/FilamentSimulation_gasType_0_sourcePosition_-210.00_130.00_-4.00" />

        # Loop options
        <param name="allow_looping" value="true" />
        <param name="loop_from_iteration" value="150" />
        <param name="loop_to_iteration" value="300" />

    </node>




  <group ns="boat1/PID">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="boat1_PID" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="boat1_pid_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="20.1"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat1_pid_broadcaster" args="0.0 0.0 -4.0 0 0 0 boat1_local_base_link boat1_pid_frame 100" />


  <group ns="boat2/PID">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="boat2_PID" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="boat2_pid_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="20.1"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat2_pid_broadcaster" args="0.0 0.0 -4.0 0 0 0 boat2_local_base_link boat2_pid_frame 100" />


  <group ns="boat3/PID">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="boat3_PID" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="boat3_pid_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="20.1"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat3_pid_broadcaster" args="0.0 0.0 -4.0 0 0 0 boat3_local_base_link boat3_pid_frame 100" />



  <group ns="boat1/Anemometer">
    <node pkg="simulated_anemometer" type="simulated_anemometer" name="boat1_anemometer" output="screen">
      <param name="/sensor_frame" value="boat1_anemometer_frame" />
      <param name="/fixed_frame" value="local_map"/>
      <param name="/noise_std" value="0.1"/>
      <param name="/use_map_ref_system" value="true"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat1_anemometer_broadcaster" args="0.0 0.0 -0.5 0 0 0 boat1_local_base_link boat1_anemometer_frame 100" />


  <group ns="boat2/Anemometer">
    <node pkg="simulated_anemometer" type="simulated_anemometer" name="boat2_anemometer" output="screen">
      <param name="/sensor_frame" value="boat2_anemometer_frame" />
      <param name="/fixed_frame" value="local_map"/>
      <param name="/noise_std" value="0.3"/>
      <param name="/use_map_ref_system" value="false"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat2_anemometer_broadcaster" args="0.0 0.0 -0.5 0 0 0 boat2_local_base_link boat2_anemometer_frame 100" />


  <group ns="boat3/Anemometer">
    <node pkg="simulated_anemometer" type="simulated_anemometer" name="boat3_anemometer" output="screen">
      <param name="/sensor_frame" value="boat3_anemometer_frame" />
      <param name="/fixed_frame" value="local_map"/>
      <param name="/noise_std" value="0.3"/>
      <param name="/use_map_ref_system" value="false"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="boat3_anemometer_broadcaster" args="0.0 0.0 -0.5 0 0 0 boat3_local_base_link boat3_anemometer_frame 100" />



</launch>

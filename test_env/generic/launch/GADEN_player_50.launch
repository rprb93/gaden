<!-- mission file for GADEN player -->

<launch>
    <arg name="gadenPATH" default="/media/Data1TB/GADEN" />
    <arg name="cfdPATH" default="/media/Data1TB/CFD" />
    <arg name="datasetWind" default="sim_1ms_50/generic" />
    <arg name="scenario" default="Generic" />
    <!-- <arg name="simulation" default="50_500_10_200_02_sim50" /> -->
    <arg name="simulation" default="50_500_10_20_02_sim50" />

    # OdorSource 1
    <arg name="source_location_x" default="170.00" />
    <arg name="source_location_y" default="100.00" />
    <arg name="source_location_z" default="25.00" />


    <node name="map_server" pkg="map_server" type="map_server" args="$(arg gadenPATH)/$(arg scenario)/occupancy.yaml">
      <param name="frame_id" value="occ_map"/>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="occ_broadcaster" args="0 0 0 0 0 0 local_map occ_map 100" />


    ### RVIZ ###
    <node name="rviz" pkg="rviz" type="rviz" args="-d /home/rprb/catkin_ws/src/gaden/test_env/generic/launch/gaden.rviz"/>


     ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" type="environment" name="environment" output="screen">
        <param name="verbose" value="true"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="local_map"/>

        # Plot CAD models (Collada format .dae)
        <param name="number_of_CAD" value="1"/>
        <rosparam subst_value="True">
            CAD_0: file://$(arg gadenPATH)/$(arg scenario)/cad_models/Generic_walls.stl
            CAD_0_color: [0.92, 0.96, 0.96]
        </rosparam>

        # Plot 3D OccupancyGridmap

        <param name="occupancy3D_data" value="$(arg gadenPATH)/$(arg scenario)/OccupancyGrid3D.csv" />


        # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <param name="source_0_position_x" value="$(arg source_location_x)"/>
        <param name="source_0_position_y" value="$(arg source_location_y)"/>
        <param name="source_0_position_z" value="$(arg source_location_z)"/>
        <rosparam>
            source_0_scale: 1
            source_0_color: [0.0, 1.0, 0.0]
        </rosparam>
    </node>



    ### NODE PLAYER ###
    #-------------------
    <node pkg="gaden_player" type="gaden_player" name="gaden_player" output="screen">
    
      <param name="verbose" value="true" />
	    <param name="player_freq" value="10" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="200" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
      <param name="fixed_frame" value="local_map"/>
      <param name="scale_filament" value="1"/>
      <param name="conc_threshold" value="0.05"/>
      

      <param name="occupancyFile" value="$(arg gadenPATH)/$(arg scenario)/OccupancyGrid3D.csv" />

      # Data from the "filament_simulator" pkg. Multiple sources can be set here
      <param name="simulation_data_0" value="$(arg gadenPATH)/$(arg scenario)/gas_simulations/$(arg simulation)/FilamentSimulation_gasType_0_sourcePosition_$(arg source_location_x)_$(arg source_location_y)_$(arg source_location_z)" />

      # Loop options
      <param name="allow_looping" value="true" />
      <param name="loop_from_iteration" value="200" />
      <param name="loop_to_iteration" value="900" />

    </node>







  <!-- Droene1 sensors -->
  <group ns="drone1/PID1">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="drone1_PID1" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="drone1_pid1_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="0.0"/>
        <param name="/PID_Rate" value="10"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="drone1_pid1_broadcaster" args="150 100 25 0 0 0 local_map drone1_pid1_frame 100" />

  <!-- Drone1 sensors -->
  <group ns="drone1/PID2">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="drone1_PID2" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="drone1_pid2_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="0.0"/>
        <param name="/PID_Rate" value="10"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="drone1_pid2_broadcaster" args="125 100 25 0 0 0 local_map drone1_pid2_frame 100" />

  <!-- Droene1 sensors -->
  <group ns="drone1/PID3">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="drone1_PID3" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="drone1_pid3_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="0.0"/>
        <param name="/PID_Rate" value="10"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="drone1_pid3_broadcaster" args="100 100 25 0 0 0 local_map drone1_pid3_frame 100" />

  <!-- Droene1 sensors -->
  <group ns="drone1/PID4">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="drone1_PID4" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="drone1_pid4_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="0.0"/>
        <param name="/PID_Rate" value="10"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="drone1_pid4_broadcaster" args="75 100 25 0 0 0 local_map drone1_pid4_frame 100" />

  <!-- Droene1 sensors -->
  <group ns="drone1/PID5">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="drone1_PID5" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="drone1_pid5_frame" />
        <param name="/fixed_frame" value="local_map"/>
        <param name="/noise_std" value="0.0"/>
        <param name="/PID_Rate" value="10"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="drone1_pid5_broadcaster" args="50 100 25 0 0 0 local_map drone1_pid5_frame 100" />

</launch>
